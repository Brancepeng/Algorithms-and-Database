/*  问题描述:
给定一个整数数组nums和一个整数target,返回两个数字的索引,使他们相加为target.
您可能会假设每个输入都只有一个解决方案，并且您可能不会两次使用相同的元素。
您可以按任何顺序返回答案。 */

/* 示例 1：

输入： nums = [2,7,11,15], target = 9
输出： [0,1]
解释：因为 nums[0] + nums[1] == 9，所以我们返回 [0, 1]。 */


/* 示例 2：

输入： nums = [3,2,4], target = 6
输出： [1,2] */


/* 示例 3：

输入： nums = [3,3], target = 6
输出： [0,1] */

//以下提供三种解决方案;

/* 使用蛮力方法: 
在给定的数组nums中寻找每一个可能的对.
对给定数组nums执行一下步骤:
运行两个循环来测试提供的数组中的每个组合。
要获取所有潜在对，请将外环固定在给定索引处并移动内环。外环从 i=0 延伸到 i=n-2，而内环从 j=i+1 延伸到 j=n-1。
这里的n表示数组长度.i和j表示数组每个值的索引.
*/

/* @param {number[]} nums
@param {number[]} target
@return {number[]}  */
var twoSum = function (nums,target){
    for(let i = 0; i < nums.length-1; i++){
        for(let j = i + 1;j < nums.length;j++){
            if(nums[i] + nums[j] === target){
                return [i,j];
            }
        }
    }
}
/*
以上程序时间复杂度为O(n2) ,空间复杂度为O(1);
 */


/* Hashmap是第二种解决方案
Hashmap是一种数据结构，允许快速查找和检索与给定键关联的值。它在其他编程语言中也被称为哈希
表或字典。
在 Hashmap 中，数据存储在类似数组的结构中，但不是使用整数来索引值，而是使用键。哈希函数应用于每个键，将键转换为数组中的唯一索引。然后将与键相关联的值存储在该索引处的数组中。
当搜索与给定键关联的值时，哈希函数应用于键以在数组中找到相应的索引。然后返回存储在该索引处的值。由于散列函数旨在为每个键生成唯一索引，因此查找时间通常是常数或 O(1)，这是非常快的。

哈希图通常用于许多编程语言中，用于执行缓存、索引和存储键值对等任务。它们也常用于需要快速查
找的算法中，例如图遍历算法和动态规划算法。但是，当将两个不同的键散列到同一个索引时，可能会
发生散列冲突，如果处理不当，可能会导致性能问题。
*/

/* 

*/